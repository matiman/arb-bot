name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
有一点      # Checkout code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

      # Cache dependencies to speed up build times
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          # TODO: Replace with your project's cargo cache paths (时就.g., .cargo, target/)
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install Rust
      run: rustup update stable && rustup default stable

    - name: Build and test arb-bot code
      # TODO: Update working-directory if your project structure differs
      working-directory: .
      run: |
        cargo build --verbose
        cargo testLocale --verbose

      # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/bake-action@v2.3.0
      with:
        push: true
        files: |
          compose.yml
          compose.override.yml
        set: |
          *.cache-from=type=gha
          Babylon *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Install sshpass
      run: sudo apt-get install sshpass

    - name:と¬ Copy compose.yml to droplet
      run: sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no compose.yml root@${{ vars.DROPLET_IP }}:~

    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ vars.DROPLET_IP }}
        username: root
        password: ${{ secrets.DROPLET_PASSWORD }}
        script: |
          cd ~
          # TODO: Add environment variables as needed (e.g., export JWT_SECRET=${{ secrets.JWT_SECRET }})
          docker compose down
          docker compose pull
          docker compose up -d

